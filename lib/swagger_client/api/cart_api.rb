=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.0.0
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module SwaggerClient
  class CartApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Get list of supported platforms
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20027]
    def account_supported_platforms(opts = {})
      data, _status_code, _headers = account_supported_platforms_with_http_info(opts)
      return data
    end

    # 
    # Get list of supported platforms
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20027, Fixnum, Hash)>] InlineResponse20027 data, response status code and response headers
    def account_supported_platforms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.account_supported_platforms ..."
      end
      # resource path
      local_var_path = "/account.supported_platforms.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20027')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#account_supported_platforms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Download bridge for store
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20014]
    def bridge_download(opts = {})
      data, _status_code, _headers = bridge_download_with_http_info(opts)
      return data
    end

    # 
    # Download bridge for store
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20014, Fixnum, Hash)>] InlineResponse20014 data, response status code and response headers
    def bridge_download_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.bridge_download ..."
      end
      # resource path
      local_var_path = "/bridge.download.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#bridge_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get bridge key and store key
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2009]
    def cart_bridge(opts = {})
      data, _status_code, _headers = cart_bridge_with_http_info(opts)
      return data
    end

    # 
    # Get bridge key and store key
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2009, Fixnum, Hash)>] InlineResponse2009 data, response status code and response headers
    def cart_bridge_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_bridge ..."
      end
      # resource path
      local_var_path = "/cart.bridge.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2009')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_bridge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Clear cache on store.
    # @param cache_type Defines which cache should be cleared.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20022]
    def cart_clear_cache(cache_type, opts = {})
      data, _status_code, _headers = cart_clear_cache_with_http_info(cache_type, opts)
      return data
    end

    # 
    # Clear cache on store.
    # @param cache_type Defines which cache should be cleared.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20022, Fixnum, Hash)>] InlineResponse20022 data, response status code and response headers
    def cart_clear_cache_with_http_info(cache_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_clear_cache ..."
      end
      # verify the required parameter 'cache_type' is set
      if @api_client.config.client_side_validation && cache_type.nil?
        fail ArgumentError, "Missing the required parameter 'cache_type' when calling CartApi.cart_clear_cache"
      end
      # resource path
      local_var_path = "/cart.clear_cache.json"

      # query parameters
      query_params = {}
      query_params[:'cache_type'] = cache_type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20022')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_clear_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of cart configs
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to store_name,store_url,db_prefix)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [InlineResponse20013]
    def cart_config(opts = {})
      data, _status_code, _headers = cart_config_with_http_info(opts)
      return data
    end

    # 
    # Get list of cart configs
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(InlineResponse20013, Fixnum, Hash)>] InlineResponse20013 data, response status code and response headers
    def cart_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_config ..."
      end
      # resource path
      local_var_path = "/cart.config.json"

      # query parameters
      query_params = {}
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Use this API method to update custom data in client database.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20014]
    def cart_config_update(body, opts = {})
      data, _status_code, _headers = cart_config_update_with_http_info(body, opts)
      return data
    end

    # 
    # Use this API method to update custom data in client database.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20014, Fixnum, Hash)>] InlineResponse20014 data, response status code and response headers
    def cart_config_update_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_config_update ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CartApi.cart_config_update"
      end
      # resource path
      local_var_path = "/cart.config.update.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_config_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create new coupon
    # @param code Coupon code
    # @param action_type Coupon discount type
    # @param action_apply_to Defines where discount should be applied
    # @param action_scope Specify how discount should be applied. If scope&#x3D;matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
    # @param action_amount Defines the discount amount value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date_start Defines when discount code will be available. (default to Current date and time)
    # @option opts [String] :date_end Defines when discount code will be expired.
    # @option opts [Integer] :usage_limit Usage limit for coupon.
    # @option opts [Integer] :usage_limit_per_customer Usage limit per customer.
    # @option opts [String] :action_condition_entity Defines entity for action condition.
    # @option opts [String] :action_condition_key Defines entity attribute code for action condition.
    # @option opts [String] :action_condition_operator Defines condition operator.
    # @option opts [String] :action_condition_value Defines condition attribute value/s. Can be comma separated string.
    # @return [InlineResponse20020]
    def cart_coupon_add(code, action_type, action_apply_to, action_scope, action_amount, opts = {})
      data, _status_code, _headers = cart_coupon_add_with_http_info(code, action_type, action_apply_to, action_scope, action_amount, opts)
      return data
    end

    # 
    # Create new coupon
    # @param code Coupon code
    # @param action_type Coupon discount type
    # @param action_apply_to Defines where discount should be applied
    # @param action_scope Specify how discount should be applied. If scope&#x3D;matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
    # @param action_amount Defines the discount amount value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date_start Defines when discount code will be available.
    # @option opts [String] :date_end Defines when discount code will be expired.
    # @option opts [Integer] :usage_limit Usage limit for coupon.
    # @option opts [Integer] :usage_limit_per_customer Usage limit per customer.
    # @option opts [String] :action_condition_entity Defines entity for action condition.
    # @option opts [String] :action_condition_key Defines entity attribute code for action condition.
    # @option opts [String] :action_condition_operator Defines condition operator.
    # @option opts [String] :action_condition_value Defines condition attribute value/s. Can be comma separated string.
    # @return [Array<(InlineResponse20020, Fixnum, Hash)>] InlineResponse20020 data, response status code and response headers
    def cart_coupon_add_with_http_info(code, action_type, action_apply_to, action_scope, action_amount, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_coupon_add ..."
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling CartApi.cart_coupon_add"
      end
      # verify the required parameter 'action_type' is set
      if @api_client.config.client_side_validation && action_type.nil?
        fail ArgumentError, "Missing the required parameter 'action_type' when calling CartApi.cart_coupon_add"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['percent', 'fixed'].include?(action_type)
        fail ArgumentError, "invalid value for 'action_type', must be one of percent, fixed"
      end
      # verify the required parameter 'action_apply_to' is set
      if @api_client.config.client_side_validation && action_apply_to.nil?
        fail ArgumentError, "Missing the required parameter 'action_apply_to' when calling CartApi.cart_coupon_add"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['order_total', 'item_price', 'shipping'].include?(action_apply_to)
        fail ArgumentError, "invalid value for 'action_apply_to', must be one of order_total, item_price, shipping"
      end
      # verify the required parameter 'action_scope' is set
      if @api_client.config.client_side_validation && action_scope.nil?
        fail ArgumentError, "Missing the required parameter 'action_scope' when calling CartApi.cart_coupon_add"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['order', 'matching_items'].include?(action_scope)
        fail ArgumentError, "invalid value for 'action_scope', must be one of order, matching_items"
      end
      # verify the required parameter 'action_amount' is set
      if @api_client.config.client_side_validation && action_amount.nil?
        fail ArgumentError, "Missing the required parameter 'action_amount' when calling CartApi.cart_coupon_add"
      end
      # resource path
      local_var_path = "/cart.coupon.add.json"

      # query parameters
      query_params = {}
      query_params[:'code'] = code
      query_params[:'action_type'] = action_type
      query_params[:'action_apply_to'] = action_apply_to
      query_params[:'action_scope'] = action_scope
      query_params[:'action_amount'] = action_amount
      query_params[:'date_start'] = opts[:'date_start'] if !opts[:'date_start'].nil?
      query_params[:'date_end'] = opts[:'date_end'] if !opts[:'date_end'].nil?
      query_params[:'usage_limit'] = opts[:'usage_limit'] if !opts[:'usage_limit'].nil?
      query_params[:'usage_limit_per_customer'] = opts[:'usage_limit_per_customer'] if !opts[:'usage_limit_per_customer'].nil?
      query_params[:'action_condition_entity'] = opts[:'action_condition_entity'] if !opts[:'action_condition_entity'].nil?
      query_params[:'action_condition_key'] = opts[:'action_condition_key'] if !opts[:'action_condition_key'].nil?
      query_params[:'action_condition_operator'] = opts[:'action_condition_operator'] if !opts[:'action_condition_operator'].nil?
      query_params[:'action_condition_value'] = opts[:'action_condition_value'] if !opts[:'action_condition_value'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20020')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_coupon_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get cart coupons count.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :date_start_from Filter entity by date_start (greater or equal)
    # @option opts [String] :date_start_to Filter entity by date_start (less or equal)
    # @option opts [String] :date_end_from Filter entity by date_end (greater or equal)
    # @option opts [String] :date_end_to Filter entity by date_end (less or equal)
    # @option opts [BOOLEAN] :avail Defines category&#39;s visibility status (default to true)
    # @return [InlineResponse20015]
    def cart_coupon_count(opts = {})
      data, _status_code, _headers = cart_coupon_count_with_http_info(opts)
      return data
    end

    # 
    # Get cart coupons count.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :date_start_from Filter entity by date_start (greater or equal)
    # @option opts [String] :date_start_to Filter entity by date_start (less or equal)
    # @option opts [String] :date_end_from Filter entity by date_end (greater or equal)
    # @option opts [String] :date_end_to Filter entity by date_end (less or equal)
    # @option opts [BOOLEAN] :avail Defines category&#39;s visibility status
    # @return [Array<(InlineResponse20015, Fixnum, Hash)>] InlineResponse20015 data, response status code and response headers
    def cart_coupon_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_coupon_count ..."
      end
      # resource path
      local_var_path = "/cart.coupon.count.json"

      # query parameters
      query_params = {}
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'date_start_from'] = opts[:'date_start_from'] if !opts[:'date_start_from'].nil?
      query_params[:'date_start_to'] = opts[:'date_start_to'] if !opts[:'date_start_to'].nil?
      query_params[:'date_end_from'] = opts[:'date_end_from'] if !opts[:'date_end_from'].nil?
      query_params[:'date_end_to'] = opts[:'date_end_to'] if !opts[:'date_end_to'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20015')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_coupon_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete coupon
    # @param id Entity id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def cart_coupon_delete(id, opts = {})
      data, _status_code, _headers = cart_coupon_delete_with_http_info(id, opts)
      return data
    end

    # 
    # Delete coupon
    # @param id Entity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def cart_coupon_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_coupon_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CartApi.cart_coupon_delete"
      end
      # resource path
      local_var_path = "/cart.coupon.delete.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_coupon_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get cart coupon discounts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :store_id Filter coupons by store id
    # @option opts [String] :date_start_from Filter entity by date_start (greater or equal)
    # @option opts [String] :date_start_to Filter entity by date_start (less or equal)
    # @option opts [String] :date_end_from Filter entity by date_end (greater or equal)
    # @option opts [String] :date_end_to Filter entity by date_end (less or equal)
    # @option opts [BOOLEAN] :avail Filter coupons by avail status
    # @option opts [String] :lang_id Language id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to force_all)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [InlineResponse20016]
    def cart_coupon_list(opts = {})
      data, _status_code, _headers = cart_coupon_list_with_http_info(opts)
      return data
    end

    # 
    # Get cart coupon discounts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :store_id Filter coupons by store id
    # @option opts [String] :date_start_from Filter entity by date_start (greater or equal)
    # @option opts [String] :date_start_to Filter entity by date_start (less or equal)
    # @option opts [String] :date_end_from Filter entity by date_end (greater or equal)
    # @option opts [String] :date_end_to Filter entity by date_end (less or equal)
    # @option opts [BOOLEAN] :avail Filter coupons by avail status
    # @option opts [String] :lang_id Language id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(InlineResponse20016, Fixnum, Hash)>] InlineResponse20016 data, response status code and response headers
    def cart_coupon_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_coupon_list ..."
      end
      # resource path
      local_var_path = "/cart.coupon.list.json"

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'date_start_from'] = opts[:'date_start_from'] if !opts[:'date_start_from'].nil?
      query_params[:'date_start_to'] = opts[:'date_start_to'] if !opts[:'date_start_to'].nil?
      query_params[:'date_end_from'] = opts[:'date_end_from'] if !opts[:'date_end_from'].nil?
      query_params[:'date_end_to'] = opts[:'date_end_to'] if !opts[:'date_end_to'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20016')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_coupon_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add store to the account
    # @param cart_id Store’s identifier which you can get from cart_list method
    # @param store_url A web address of a store that you would like to connect to API2Cart
    # @param store_id Store Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bridge_url This parameter allows to set up store with custom bridge url (you must use store_root parameter if a bridge folder is not in the root folder of the store)
    # @option opts [String] :store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter)
    # @option opts [String] :store_key Set this parameter if bridge is already uploaded to store
    # @option opts [String] :shared_secret Shared secret
    # @option opts [BOOLEAN] :validate_version Specify if api2cart should validate cart version (default to false)
    # @option opts [BOOLEAN] :verify Enables or disables cart&#39;s verification (default to true)
    # @option opts [String] :db_tables_prefix This parameter is deprecated for this method. Please, use this parameter in method account.config.update
    # @option opts [String] :ftp_host FTP connection host
    # @option opts [String] :ftp_user FTP User
    # @option opts [String] :ftp_password FTP Password
    # @option opts [Integer] :ftp_port FTP Port
    # @option opts [String] :ftp_store_dir FTP Store dir
    # @option opts [String] :seller_id Seller Id
    # @option opts [String] :marketplaces_ids Comma separated marketplaces ids
    # @option opts [String] :api_key_3dcart 3DCart API Key
    # @option opts [String] :admin_account It&#39;s a BigCommerce account for which API is enabled
    # @option opts [String] :api_path BigCommerce API URL
    # @option opts [String] :api_key Bigcommerce API Key
    # @option opts [String] :client_id Client ID of the requesting app
    # @option opts [String] :access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :context API Path section unique to the store
    # @option opts [String] :access_token2 Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :api_key_shopify Shopify API Key
    # @option opts [String] :api_password Shopify API Password
    # @option opts [String] :access_token_shopify Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :api_key2 Neto API Key
    # @option opts [String] :api_username Neto User Name
    # @option opts [String] :encrypted_password Volusion API Password
    # @option opts [String] :login It&#39;s a Volusion account for which API is enabled
    # @option opts [String] :api_user_adnsf It&#39;s a AspDotNetStorefront account for which API is available
    # @option opts [String] :api_pass AspDotNetStorefront API Password
    # @option opts [String] :access_key_scelite Shopping Cart Elite Access Key
    # @option opts [String] :api_key_scelite Shopping Cart Elite API Key
    # @option opts [String] :api_secret_key_scelite Shopping Cart Elite API Secret Key
    # @option opts [String] :private_key 3DCart Application Private Key
    # @option opts [String] :app_token 3DCart Token from Application
    # @option opts [String] :etsy_keystring Etsy keystring
    # @option opts [String] :etsy_shared_secret Etsy shared secret
    # @option opts [String] :token_secret Secret token authorizing the app to access resources on behalf of a user
    # @option opts [String] :ebay_client_id Application ID (AppID).
    # @option opts [String] :ebay_client_secret Shared Secret from eBay application
    # @option opts [String] :ebay_runame The RuName value that eBay assigns to your application.
    # @option opts [String] :ebay_access_token Used to authenticate API requests.
    # @option opts [String] :ebay_refresh_token Used to renew the access token.
    # @option opts [String] :ebay_environment  (default to production)
    # @option opts [String] :dw_client_id Demandware client id
    # @option opts [String] :dw_api_pass Demandware api password
    # @option opts [String] :amazon_secret_key Amazon Secret Key
    # @option opts [String] :amazon_access_key_id Amazon Secret Key Id
    # @option opts [String] :environment  (default to production)
    # @return [InlineResponse2006]
    def cart_create(cart_id, store_url, store_id, opts = {})
      data, _status_code, _headers = cart_create_with_http_info(cart_id, store_url, store_id, opts)
      return data
    end

    # 
    # Add store to the account
    # @param cart_id Store’s identifier which you can get from cart_list method
    # @param store_url A web address of a store that you would like to connect to API2Cart
    # @param store_id Store Id
    # @param seller_id Seller Id
    # @param marketplaces_ids Comma separated marketplaces ids
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bridge_url This parameter allows to set up store with custom bridge url (you must use store_root parameter if a bridge folder is not in the root folder of the store)
    # @option opts [String] :store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter)
    # @option opts [String] :store_key Set this parameter if bridge is already uploaded to store
    # @option opts [String] :shared_secret Shared secret
    # @option opts [BOOLEAN] :validate_version Specify if api2cart should validate cart version
    # @option opts [BOOLEAN] :verify Enables or disables cart&#39;s verification
    # @option opts [String] :db_tables_prefix This parameter is deprecated for this method. Please, use this parameter in method account.config.update
    # @option opts [String] :ftp_host FTP connection host
    # @option opts [String] :ftp_user FTP User
    # @option opts [String] :ftp_password FTP Password
    # @option opts [Integer] :ftp_port FTP Port
    # @option opts [String] :ftp_store_dir FTP Store dir
    # @option opts [String] :api_key_3dcart 3DCart API Key
    # @option opts [String] :admin_account It&#39;s a BigCommerce account for which API is enabled
    # @option opts [String] :api_path BigCommerce API URL
    # @option opts [String] :api_key Bigcommerce API Key
    # @option opts [String] :client_id Client ID of the requesting app
    # @option opts [String] :access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :context API Path section unique to the store
    # @option opts [String] :access_token2 Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :api_key_shopify Shopify API Key
    # @option opts [String] :api_password Shopify API Password
    # @option opts [String] :access_token_shopify Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :api_key2 Neto API Key
    # @option opts [String] :api_username Neto User Name
    # @option opts [String] :encrypted_password Volusion API Password
    # @option opts [String] :login It&#39;s a Volusion account for which API is enabled
    # @option opts [String] :api_user_adnsf It&#39;s a AspDotNetStorefront account for which API is available
    # @option opts [String] :api_pass AspDotNetStorefront API Password
    # @option opts [String] :access_key_scelite Shopping Cart Elite Access Key
    # @option opts [String] :api_key_scelite Shopping Cart Elite API Key
    # @option opts [String] :api_secret_key_scelite Shopping Cart Elite API Secret Key
    # @option opts [String] :private_key 3DCart Application Private Key
    # @option opts [String] :app_token 3DCart Token from Application
    # @option opts [String] :etsy_keystring Etsy keystring
    # @option opts [String] :etsy_shared_secret Etsy shared secret
    # @option opts [String] :token_secret Secret token authorizing the app to access resources on behalf of a user
    # @option opts [String] :ebay_client_id Application ID (AppID).
    # @option opts [String] :ebay_client_secret Shared Secret from eBay application
    # @option opts [String] :ebay_runame The RuName value that eBay assigns to your application.
    # @option opts [String] :ebay_access_token Used to authenticate API requests.
    # @option opts [String] :ebay_refresh_token Used to renew the access token.
    # @option opts [String] :ebay_environment 
    # @option opts [String] :dw_client_id Demandware client id
    # @option opts [String] :dw_api_pass Demandware api password
    # @option opts [String] :amazon_secret_key Amazon Secret Key
    # @option opts [String] :amazon_access_key_id Amazon Secret Key Id
    # @option opts [String] :environment 
    # @return [Array<(InlineResponse2006, Fixnum, Hash)>] InlineResponse2006 data, response status code and response headers
    def cart_create_with_http_info(cart_id, store_url, store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_create ..."
      end
      # verify the required parameter 'cart_id' is set
      if @api_client.config.client_side_validation && cart_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_id' when calling CartApi.cart_create"
      end
      # verify the required parameter 'store_url' is set
      if @api_client.config.client_side_validation && store_url.nil?
        fail ArgumentError, "Missing the required parameter 'store_url' when calling CartApi.cart_create"
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CartApi.cart_create"
      end

      # resource path
      local_var_path = "/cart.create.json"

      # query parameters
      query_params = {}
      query_params[:'cart_id'] = cart_id
      query_params[:'store_url'] = store_url
      query_params[:'store_id'] = store_id
      query_params[:'seller_id'] = opts[:'seller_id'] if !opts[:'seller_id'].nil?
      query_params[:'marketplaces_ids'] = opts[:'marketplaces_ids'] if !opts[:'marketplaces_ids'].nil?
      query_params[:'bridge_url'] = opts[:'bridge_url'] if !opts[:'bridge_url'].nil?
      query_params[:'store_root'] = opts[:'store_root'] if !opts[:'store_root'].nil?
      query_params[:'store_key'] = opts[:'store_key'] if !opts[:'store_key'].nil?
      query_params[:'shared_secret'] = opts[:'shared_secret'] if !opts[:'shared_secret'].nil?
      query_params[:'validate_version'] = opts[:'validate_version'] if !opts[:'validate_version'].nil?
      query_params[:'verify'] = opts[:'verify'] if !opts[:'verify'].nil?
      query_params[:'db_tables_prefix'] = opts[:'db_tables_prefix'] if !opts[:'db_tables_prefix'].nil?
      query_params[:'ftp_host'] = opts[:'ftp_host'] if !opts[:'ftp_host'].nil?
      query_params[:'ftp_user'] = opts[:'ftp_user'] if !opts[:'ftp_user'].nil?
      query_params[:'ftp_password'] = opts[:'ftp_password'] if !opts[:'ftp_password'].nil?
      query_params[:'ftp_port'] = opts[:'ftp_port'] if !opts[:'ftp_port'].nil?
      query_params[:'ftp_store_dir'] = opts[:'ftp_store_dir'] if !opts[:'ftp_store_dir'].nil?
      query_params[:'apiKey_3dcart'] = opts[:'api_key_3dcart'] if !opts[:'api_key_3dcart'].nil?
      query_params[:'AdminAccount'] = opts[:'admin_account'] if !opts[:'admin_account'].nil?
      query_params[:'ApiPath'] = opts[:'api_path'] if !opts[:'api_path'].nil?
      query_params[:'ApiKey'] = opts[:'api_key'] if !opts[:'api_key'].nil?
      query_params[:'client_id'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      query_params[:'accessToken'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'access_token'] = opts[:'access_token2'] if !opts[:'access_token2'].nil?
      query_params[:'apiKey_shopify'] = opts[:'api_key_shopify'] if !opts[:'api_key_shopify'].nil?
      query_params[:'apiPassword'] = opts[:'api_password'] if !opts[:'api_password'].nil?
      query_params[:'accessToken_shopify'] = opts[:'access_token_shopify'] if !opts[:'access_token_shopify'].nil?
      query_params[:'apiKey'] = opts[:'api_key2'] if !opts[:'api_key2'].nil?
      query_params[:'apiUsername'] = opts[:'api_username'] if !opts[:'api_username'].nil?
      query_params[:'EncryptedPassword'] = opts[:'encrypted_password'] if !opts[:'encrypted_password'].nil?
      query_params[:'Login'] = opts[:'login'] if !opts[:'login'].nil?
      query_params[:'apiUser_adnsf'] = opts[:'api_user_adnsf'] if !opts[:'api_user_adnsf'].nil?
      query_params[:'apiPass'] = opts[:'api_pass'] if !opts[:'api_pass'].nil?
      query_params[:'accessKey_scelite'] = opts[:'access_key_scelite'] if !opts[:'access_key_scelite'].nil?
      query_params[:'apiKey_scelite'] = opts[:'api_key_scelite'] if !opts[:'api_key_scelite'].nil?
      query_params[:'apiSecretKey_scelite'] = opts[:'api_secret_key_scelite'] if !opts[:'api_secret_key_scelite'].nil?
      query_params[:'privateKey'] = opts[:'private_key'] if !opts[:'private_key'].nil?
      query_params[:'appToken'] = opts[:'app_token'] if !opts[:'app_token'].nil?
      query_params[:'etsy_keystring'] = opts[:'etsy_keystring'] if !opts[:'etsy_keystring'].nil?
      query_params[:'etsy_shared_secret'] = opts[:'etsy_shared_secret'] if !opts[:'etsy_shared_secret'].nil?
      query_params[:'tokenSecret'] = opts[:'token_secret'] if !opts[:'token_secret'].nil?
      query_params[:'ebay_client_id'] = opts[:'ebay_client_id'] if !opts[:'ebay_client_id'].nil?
      query_params[:'ebay_client_secret'] = opts[:'ebay_client_secret'] if !opts[:'ebay_client_secret'].nil?
      query_params[:'ebay_runame'] = opts[:'ebay_runame'] if !opts[:'ebay_runame'].nil?
      query_params[:'ebay_access_token'] = opts[:'ebay_access_token'] if !opts[:'ebay_access_token'].nil?
      query_params[:'ebay_refresh_token'] = opts[:'ebay_refresh_token'] if !opts[:'ebay_refresh_token'].nil?
      query_params[:'ebay_environment'] = opts[:'ebay_environment'] if !opts[:'ebay_environment'].nil?
      query_params[:'dw_client_id'] = opts[:'dw_client_id'] if !opts[:'dw_client_id'].nil?
      query_params[:'dw_api_pass'] = opts[:'dw_api_pass'] if !opts[:'dw_api_pass'].nil?
      query_params[:'amazon_secret_key'] = opts[:'amazon_secret_key'] if !opts[:'amazon_secret_key'].nil?
      query_params[:'amazon_access_key_id'] = opts[:'amazon_access_key_id'] if !opts[:'amazon_access_key_id'].nil?
      query_params[:'environment'] = opts[:'environment'] if !opts[:'environment'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2006')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Remove store from API2Cart
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20010]
    def cart_delete(opts = {})
      data, _status_code, _headers = cart_delete_with_http_info(opts)
      return data
    end

    # 
    # Remove store from API2Cart
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20010, Fixnum, Hash)>] InlineResponse20010 data, response status code and response headers
    def cart_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_delete ..."
      end
      # resource path
      local_var_path = "/cart.delete.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20010')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Disconnect with the store and clear store session data.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_bridge Identifies if there is a necessity to delete bridge (default to false)
    # @return [InlineResponse20011]
    def cart_disconnect(opts = {})
      data, _status_code, _headers = cart_disconnect_with_http_info(opts)
      return data
    end

    # 
    # Disconnect with the store and clear store session data.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_bridge Identifies if there is a necessity to delete bridge
    # @return [Array<(InlineResponse20011, Fixnum, Hash)>] InlineResponse20011 data, response status code and response headers
    def cart_disconnect_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_disconnect ..."
      end
      # resource path
      local_var_path = "/cart.disconnect.json"

      # query parameters
      query_params = {}
      query_params[:'delete_bridge'] = opts[:'delete_bridge'] if !opts[:'delete_bridge'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20011')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_disconnect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create new gift card
    # @param amount Defines the gift card amount value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Gift card code
    # @option opts [String] :owner_email Gift card owner email
    # @return [InlineResponse20019]
    def cart_giftcard_add(amount, opts = {})
      data, _status_code, _headers = cart_giftcard_add_with_http_info(amount, opts)
      return data
    end

    # 
    # Create new gift card
    # @param amount Defines the gift card amount value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Gift card code
    # @option opts [String] :owner_email Gift card owner email
    # @return [Array<(InlineResponse20019, Fixnum, Hash)>] InlineResponse20019 data, response status code and response headers
    def cart_giftcard_add_with_http_info(amount, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_giftcard_add ..."
      end
      # verify the required parameter 'amount' is set
      if @api_client.config.client_side_validation && amount.nil?
        fail ArgumentError, "Missing the required parameter 'amount' when calling CartApi.cart_giftcard_add"
      end
      # resource path
      local_var_path = "/cart.giftcard.add.json"

      # query parameters
      query_params = {}
      query_params[:'amount'] = amount
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'owner_email'] = opts[:'owner_email'] if !opts[:'owner_email'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20019')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_giftcard_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get gift cards count.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [InlineResponse20017]
    def cart_giftcard_count(opts = {})
      data, _status_code, _headers = cart_giftcard_count_with_http_info(opts)
      return data
    end

    # 
    # Get gift cards count.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(InlineResponse20017, Fixnum, Hash)>] InlineResponse20017 data, response status code and response headers
    def cart_giftcard_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_giftcard_count ..."
      end
      # resource path
      local_var_path = "/cart.giftcard.count.json"

      # query parameters
      query_params = {}
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20017')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_giftcard_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get gift cards list.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to force_all)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [InlineResponse20018]
    def cart_giftcard_list(opts = {})
      data, _status_code, _headers = cart_giftcard_list_with_http_info(opts)
      return data
    end

    # 
    # Get gift cards list.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :store_id Store Id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(InlineResponse20018, Fixnum, Hash)>] InlineResponse20018 data, response status code and response headers
    def cart_giftcard_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_giftcard_list ..."
      end
      # resource path
      local_var_path = "/cart.giftcard.list.json"

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20018')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_giftcard_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get cart information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to store_name,store_url,db_prefix)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Store Id
    # @return [InlineResponse20021]
    def cart_info(opts = {})
      data, _status_code, _headers = cart_info_with_http_info(opts)
      return data
    end

    # 
    # Get cart information
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Store Id
    # @return [Array<(InlineResponse20021, Fixnum, Hash)>] InlineResponse20021 data, response status code and response headers
    def cart_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_info ..."
      end
      # resource path
      local_var_path = "/cart.info.json"

      # query parameters
      query_params = {}
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20021')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of supported carts
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2008]
    def cart_list(opts = {})
      data, _status_code, _headers = cart_list_with_http_info(opts)
      return data
    end

    # 
    # Get list of supported carts
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2008, Fixnum, Hash)>] InlineResponse2008 data, response status code and response headers
    def cart_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_list ..."
      end
      # resource path
      local_var_path = "/cart.list.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2008')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of cart methods
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20012]
    def cart_methods(opts = {})
      data, _status_code, _headers = cart_methods_with_http_info(opts)
      return data
    end

    # 
    # Get list of cart methods
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20012, Fixnum, Hash)>] InlineResponse20012 data, response status code and response headers
    def cart_methods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_methods ..."
      end
      # resource path
      local_var_path = "/cart.methods.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of installed plugins
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_key Set this parameter if bridge is already uploaded to store
    # @option opts [String] :store_id Store Id
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @return [InlineResponse20023]
    def cart_plugin_list(opts = {})
      data, _status_code, _headers = cart_plugin_list_with_http_info(opts)
      return data
    end

    # 
    # Get list of installed plugins
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_key Set this parameter if bridge is already uploaded to store
    # @option opts [String] :store_id Store Id
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @return [Array<(InlineResponse20023, Fixnum, Hash)>] InlineResponse20023 data, response status code and response headers
    def cart_plugin_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_plugin_list ..."
      end
      # resource path
      local_var_path = "/cart.plugin.list.json"

      # query parameters
      query_params = {}
      query_params[:'store_key'] = opts[:'store_key'] if !opts[:'store_key'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20023')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_plugin_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Check store availability, bridge connection for the downloadable carts, identify DB prefix, validate API accesses for API carts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :validate_version Specify if api2cart should validate cart version (default to false)
    # @return [InlineResponse2007]
    def cart_validate(opts = {})
      data, _status_code, _headers = cart_validate_with_http_info(opts)
      return data
    end

    # 
    # Check store availability, bridge connection for the downloadable carts, identify DB prefix, validate API accesses for API carts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :validate_version Specify if api2cart should validate cart version
    # @return [Array<(InlineResponse2007, Fixnum, Hash)>] InlineResponse2007 data, response status code and response headers
    def cart_validate_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartApi.cart_validate ..."
      end
      # resource path
      local_var_path = "/cart.validate.json"

      # query parameters
      query_params = {}
      query_params[:'validate_version'] = opts[:'validate_version'] if !opts[:'validate_version'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2007')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_validate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
